import { useState } from 'react';
import { Trash2, Clock, Users } from 'lucide-react';
import { motion } from 'framer-motion';
import { useEffect } from 'react';
import TimetableDialog from '../TimeTable/components/TimetableDialog';
import ToastProvider from '../../components/Toaster';
import ConfirmationDialog from './ConfirmationDialog'
import { toast } from 'sonner';

const OrganizationView = ({ setConfirmDialog, orgId }) => {
  const [timeTable, setTimeTable] = useState()
  const [showTT, setShowTT] = useState(false)
  const [ttMetaData, setTtMetaData] = useState([])
  const [isLoading, setIsLoading] = useState(false)
  const [confirmBox, setConfirmBox] = useState({
    isOpen: false,
    isUnmarking: false,
    timetableId: null
  })

  const handleTimetableClick = (className) => {
    setIsLoading(true)
    fetch(`${import.meta.env.VITE_BACKEND_URL}/api/get/timetable?class=${className}&orgId=${orgId}`)
      .then(res => res.json())
      .then(({ timetable }) => {
        setTimeTable(timetable)
        setShowTT(!showTT)
      })
    setIsLoading(false)
  };

  const handleDelete = async (e) => {
    e.preventDefault();
    const timetableId = confirmBox.timetableId;
    setConfirmBox({
      isOpen: false,
      isUnmarking: false,
      timetableId: null
    });

    try {
      setIsLoading(true);
      const res = await fetch(`${import.meta.env.VITE_BACKEND_URL}/api/delete/timetable?id=${timetableId}`);
      const { error, result } = await res.json();
      
      if (result) {
        toast.success(result);
        setTtMetaData(ttMetaData.filter((timetable) => timetable.id !== timetableId));
      } else {
        toast.error(error);
      }
      setIsLoading(false);
    } catch (err) {
      setIsLoading(false);
      toast.error("Something went wrong!");
    }
  };

  useEffect(() => {
    setIsLoading(true)
    fetch(`${import.meta.env.VITE_BACKEND_URL}/api/get/timetable-metadata?OrgId=${orgId}`)
      .then(res => res.json())
      .then(({ timetables }) => { setTtMetaData(timetables); setIsLoading(false) })
  }, [])

  return (
    <>
      <ToastProvider />
      <>{
        confirmBox.isOpen &&
        <ConfirmationDialog
          onClose={() => {
            setConfirmBox(_ => (
              {
                isOpen: false,
                isUnmarking: false,
                timetableId: null
              }
            ))
          }}
          onConfirm={handleDelete}
          message={"Are you sure ?"}
        />
      }</>
      <div className="glass-effect rounded-xl backdrop-blur-md border border-[#4D7CFF]/20 shadow-md hover-glow">
        {
          showTT &&
          <div className='fixed z-10 w-full -top-20'>
            {timeTable === undefined ? <p className='flex items-center justify-center p-4 bg-black/90 backdrop-blur-sm w-full glass-effect text-white text-lg font-semibold tracking-tight'>There is no timetable generated by you</p> :
              <TimetableDialog
                isOpen={true}
                timetableData={timeTable}
                footer={false}
                cross={true}
                onClose={() => setShowTT(!showTT)}
              />
            }
          </div>
        }
        <div className="p-4 border-b border-[#4D7CFF]/20 flex items-center gap-2">
          <Clock className="w-6 h-6 text-[#4D7CFF]" />
          <h3 className="text-xl font-bold text-white neon-glow">Created Timetables</h3>
        </div>
        {isLoading ? <div className="w-12 h-12 mx-auto my-5 border-2 border-white border-t-transparent rounded-full animate-spin"></div> :
          <>
            {ttMetaData <= 0 ? <p className='flex items-center justify-center p-4 bg-black/90 backdrop-blur-sm w-full glass-effect text-white text-lg font-semibold tracking-tight'>There is no timetable generated by you</p> :
              <>
                <div className="p-4 grid sm:grid-cols-2 lg:grid-cols-3 gap-4 ">
                  {ttMetaData.map((timetable, index) => (
                    <motion.div
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ duration: 0.3, delay: index * 0.1 }}
                      className="glass-effect p-4 rounded-xl border border-[#4D7CFF]/20 cursor-pointer hover:border-[#4D7CFF]/40 transition-all duration-200 hover:scale-[1.02] hover:shadow-xl relative group"
                      onClick={() => handleTimetableClick(timetable?.className)}
                      key={timetable.id}
                    >
                      <motion.button
                        whileHover={{ scale: 1.1 }}
                        onClick={(e) => {
                          e.stopPropagation();
                          setConfirmBox({
                            isUnmarking: false,
                            isOpen: true,
                            timetableId: timetable.id
                          })
                        }
                        }
                        className="absolute top-3 right-3 p-2 rounded-lg bg-[#4D7CFF]/10 opacity-0 group-hover:opacity-100 hover:bg-red-500/20 transition-all duration-200"
                      >
                        <Trash2 className="w-4 h-4 text-red-400" />
                      </motion.button>
                      <div className="flex flex-col gap-2">
                        <div>
                          <pre className="text-white font-medium text-lg">{timetable.className} | {timetable.year}</pre>
                        </div>
                        <div className="flex justify-between items-center pt-2 border-t border-[#4D7CFF]/20">
                          <div className="flex items-center gap-2 text-white/70">
                            <Clock className="w-4 h-4" />
                            <span className="text-sm">{timetable?.totalSubjects} Subjects</span>
                          </div>
                          <div className="flex items-center gap-2 text-white/70">
                            <Users className="w-4 h-4" />
                            <span className="text-sm">{timetable?.totalTeachers} Teachers</span>
                          </div>
                        </div>
                      </div>
                    </motion.div>
                  ))}
                </div>
              </>
            }
          </>
        }
      </div>
    </>
  );
};

export default OrganizationView;